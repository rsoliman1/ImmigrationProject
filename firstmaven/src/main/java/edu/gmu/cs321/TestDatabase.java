package edu.gmu.cs321;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import com.mysql.cj.protocol.Resultset;

public class TestDatabase {
    // JDBC URL, username, and password of MySQL server
    private static final String URL = "jdbc:mysql://localhost:3306/cs321";
    private static final String USER = "root";
    private static final String PASSWORD = "asdfghjkl"; // replace with your MySQL password

    // JDBC variables for opening, closing connection and statement
    private static Connection connection;
    private static Statement statement;

    // Method to establish connection
    public static Connection getConnection() {
        try {
            // Load and register MySQL driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(URL, USER, PASSWORD);
            return connection;
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    // Method to create a new user
    // public static int createImmigrant(String first, String last, Date dob) {
    //     // id is autogenerated by the database as I configured the primary key with "AI"
    //     // in MySQL Workbench UI
    //     String insertQuery = "insert into immigrant (first, last, dob) VALUES (?, ?, ?)";
    //     int id = 0;
    //     try {
    //         Connection conn = getConnection();
    //         PreparedStatement stmt = conn.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
    //         stmt.setString(1, first);
    //         stmt.setString(2, last);
    //         stmt.setDate(3, dob);
    //         int rowsAffected = stmt.executeUpdate();
    //         if (rowsAffected > 0) {
    //             System.out.println("Immigrant added successfully.");
    //             ResultSet rs = stmt.getGeneratedKeys();
    //             if (rs.next())
    //                 id = rs.getInt(1);
    //         } else {
    //             System.out.println("Error adding immigrant.");
    //         }

    //     } catch (SQLException e) {
    //         e.printStackTrace();
    //     }
    //     return id;
    // }

    // Method to create a new immigrant
    public static int createImmigrant(Immigrant immigrant) {
        String insertQuery = "INSERT INTO immigrant (first, last, dob) VALUES (?, ?, ?)";
        int id = 0;
        try (Connection conn = getConnection();
            PreparedStatement stmt = conn.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS)) {

            stmt.setString(1, immigrant.getFirstName());
            stmt.setString(2, immigrant.getLastName());
            stmt.setDate(3, immigrant.getDob());
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Immigrant added successfully.");
                ResultSet rs = stmt.getGeneratedKeys();
                if (rs.next()) id = rs.getInt(1);
            } else {
                System.out.println("Error adding immigrant.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return id;
    }


    // Method to select all users from the database
    // public static void selectImmigrants() {
    //     String selectQuery = "SELECT * FROM Immigrant";

    //     try (Connection conn = getConnection();
    //             Statement stmt = conn.createStatement();
    //             ResultSet rs = stmt.executeQuery(selectQuery)) {

    //         while (rs.next()) {
    //             int id = rs.getInt("id");
    //             String first = rs.getString("first");
    //             String last = rs.getString("last");
    //             String dob = rs.getString("dob");
    //             System.out.println("ID: " + id + ", First: " + first + ", Last: " + last + ", DOB: " + dob);
    //         }

    //     } catch (SQLException e) {
    //         e.printStackTrace();
    //     }
    // }

    // Method to select all immigrants from the database
    public static List<Immigrant> selectImmigrants() {
        String selectQuery = "SELECT * FROM immigrant";
        List<Immigrant> immigrants = new ArrayList<>();

        try (Connection conn = getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(selectQuery)) {

            while (rs.next()) {
                Immigrant immigrant = new Immigrant();
                immigrant.setId(rs.getInt("id"));
                immigrant.setFirstName(rs.getString("first"));
                immigrant.setLastName(rs.getString("last"));
                immigrant.setDob(rs.getDate("dob"));
                immigrants.add(immigrant);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return immigrants;
    }


    // Method to update a user's email based on user ID
    // public static void updateImmigrant(int userId, String first, String last) {
    //     String updateQuery = "UPDATE immigrant SET first = ?, last = ? WHERE id = ?";

    //     try (Connection conn = getConnection();
    //             PreparedStatement stmt = conn.prepareStatement(updateQuery)) {

    //         stmt.setString(1, first);
    //         stmt.setString(2, last);
    //         stmt.setInt(3, userId);
    //         int rowsAffected = stmt.executeUpdate();
    //         if (rowsAffected > 0) {
    //             System.out.println("User updated successfully.");
    //         } else {
    //             System.out.println("User not found.");
    //         }

    //     } catch (SQLException e) {
    //         e.printStackTrace();
    //     }
    // }

    // Method to update an immigrant's details
    public static void updateImmigrant(Immigrant immigrant) {
        String updateQuery = "UPDATE immigrant SET first = ?, last = ?, dob = ? WHERE id = ?";

        try (Connection conn = getConnection();
            PreparedStatement stmt = conn.prepareStatement(updateQuery)) {

            stmt.setString(1, immigrant.getFirstName());
            stmt.setString(2, immigrant.getLastName());
            stmt.setDate(3, immigrant.getDob());
            stmt.setInt(4, immigrant.getId());

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Immigrant updated successfully.");
            } else {
                System.out.println("Immigrant not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // public static void main(String[] args) {
    //     // Create new users
    //     // createImmigrant(106, "First John", "First Doe", Date.valueOf("2003-01-01"));
    //     int id = createImmigrant("Kellie", "Mayham", Date.valueOf("1999-12-01"));
    //     System.out.println("New Immigrant ID: " + id);

    //     // Select and display all users
    //     System.out.println("All users in the database:");
    //     selectImmigrants();

    //     // Update user's email
    //     updateImmigrant(110, "New Guy", "New Who");

    //     // Select and display all users after update
    //     // System.out.println("All users after update:");
    //     selectImmigrants();
    // }
    public static void main(String[] args) {
        // Test inserting an immigrant
        Immigrant immigrant = new Immigrant("Kellie", "Mayham", Date.valueOf("1999-12-01"));
        int id = createImmigrant(immigrant);
        System.out.println("New Immigrant ID: " + id);
    
        // Test selecting all immigrants
        List<Immigrant> immigrants = selectImmigrants();
        System.out.println("All immigrants in the database:");
        for (Immigrant imm : immigrants) {
            System.out.println(imm);
        }
    
        // Test updating an immigrant
        if (!immigrants.isEmpty()) {
            Immigrant toUpdate = immigrants.get(0);
            toUpdate.setFirstName("UpdatedFirst");
            toUpdate.setLastName("UpdatedLast");
            updateImmigrant(toUpdate);
            System.out.println("Updated immigrant: " + toUpdate);
        }
    
        // Test selecting immigrants after update
        immigrants = selectImmigrants();
        System.out.println("Immigrants after update:");
        for (Immigrant imm : immigrants) {
            System.out.println(imm);
        }
    }
    
}